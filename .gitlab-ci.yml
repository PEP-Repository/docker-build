stages:
  - build
  - analyze
  - deploy
  - build-derived

variables:
  DOCKER_DRIVER: overlay2 # faster docker builds, see https://gitlab.com/gitlab-org/gitlab-ce/issues/21374, https://docs.docker.com/storage/storagedriver/overlayfs-driver/
  DOCKER_TLS_CERTDIR: "" # Work around failing CI jobs: see https://gitlab.com/gitlab-org/gitlab-ce/issues/64959#note_194582424
  PROJECT_REGISTRY: ${CI_REGISTRY}/${CI_PROJECT_PATH}
  IMAGE_TAG: sha-${CI_COMMIT_SHA}
  IMAGE_TAG_TEST: sha-test-${CI_COMMIT_SHA}
  DEPLOY_IMAGES: >-
    builder-ubuntu-2204
    builder-ubuntu-rolling
    builder-flatpak
    runtime-ubuntu-2204
  SCHEDULE_BRANCHES: >-
    master
    stable
    release

.docker-build-base:
  stage: build
  tags:
    - docker
  image: docker:git
  variables:
    CONTAINER_IMAGE: ${PROJECT_REGISTRY}/${IMAGE_KIND}-${IMAGE_NAME}:${IMAGE_TAG_TEST}
  services:
    - docker:dind
  script:
    - |
      bash -c "
      set -e -o pipefail
      if [ -n "${CI_COMMIT_BRANCH}" ]; then
        for branch in ${SCHEDULE_BRANCHES}; do
          if [ "$branch" = "${CI_COMMIT_BRANCH}" ]; then
            break
          fi
          if [ "$(git rev-parse "origin/$branch" --)" = "${CI_COMMIT_SHA}" ]; then
            SKIP_BUILD=1
          fi
        done
        echo "SKIP_BUILD=$SKIP_BUILD" >>build.env
        if [ "$SKIP_BUILD" = 1 ]; then
          echo "Will skip build, since this will commit will already be built on $branch"
          exit
        fi
      fi
      "
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - echo "Pushing image as $CONTAINER_IMAGE"
    - >
      docker buildx build
      --push
      --annotation "org.opencontainers.image.title=${CI_COMMIT_TITLE} [${CI_COMMIT_REF_NAME} ${CI_COMMIT_SHORT_SHA}]"
      --file ./${IMAGE_KIND}/${IMAGE_NAME}.Dockerfile
      --tag ${CONTAINER_IMAGE}
      ./${IMAGE_KIND}/
  artifacts:
    reports:
      dotenv: build.env


builder/ubuntu-2204:
  extends: .docker-build-base
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: ubuntu-2204

builder/ubuntu-rolling:
  extends: .docker-build-base
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: ubuntu-rolling

builder/flatpak:
  extends: .docker-build-base
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: flatpak

builder/ubuntu-templight:
  extends: .docker-build-base
  stage: build-derived
  when: manual
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: ubuntu-templight


runtime/ubuntu-2204:
  extends: .docker-build-base
  variables:
    IMAGE_KIND: runtime
    IMAGE_NAME: ubuntu-2204


test-images:
  stage: analyze
  rules:
    - if: $CI_PIPELINE_SOURCE != 'push' && $CI_PIPELINE_SOURCE != 'merge_request_event'
  tags:
    - docker
  image: endeveit/docker-jq
  script:
    # A better way to skip jobs is not yet available, see https://gitlab.com/gitlab-org/gitlab/-/issues/292816, https://gitlab.com/gitlab-org/gitlab/-/issues/329217
    - if [ "$SKIP_BUILD" = 1 ]; then exit; fi
    - ./run-pipeline.sh ${IMAGE_TAG_TEST}

# Use crane for efficient remote retagging
deploy-images:
  stage: deploy
  tags:
    - docker
  # See https://github.com/google/go-containerregistry/tree/main/cmd/crane#using-with-gitlab
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: ['']
  script:
    - if [ "$SKIP_BUILD" = 1 ]; then exit; fi
    - crane auth login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      for image in ${DEPLOY_IMAGES}; do
        echo "Retagging $image:${IMAGE_TAG_TEST} as ${PROJECT_REGISTRY}/$image:${IMAGE_TAG_TEST}"
        crane tag ${PROJECT_REGISTRY}/$image:${IMAGE_TAG_TEST} ${IMAGE_TAG}
        crane delete ${PROJECT_REGISTRY}/$image:${IMAGE_TAG_TEST}
      done
