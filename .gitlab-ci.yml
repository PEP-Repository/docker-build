stages:
- prepare
- build
- analyse
- deploy
- build-derived

variables:
  DOCKER_DRIVER: overlay2 # faster docker builds, see https://gitlab.com/gitlab-org/gitlab-ce/issues/21374, https://docs.docker.com/storage/storagedriver/overlayfs-driver/
  DOCKER_TLS_CERTDIR: "" # Work around failing CI jobs: see https://gitlab.com/gitlab-org/gitlab-ce/issues/64959#note_194582424
  PROJECT_REGISTRY: ${CI_REGISTRY}/${CI_PROJECT_PATH}
  IMAGE_TAG: sha-${CI_COMMIT_SHA}
  IMAGE_TAG_TEST: sha-test-${CI_COMMIT_SHA}

.docker-build-base: &docker-build-base
  stage: build
  tags:
  - docker
  image: docker:git
  variables:
    CONTAINER_IMAGE: ${PROJECT_REGISTRY}/${CI_JOB_NAME}:${IMAGE_TAG_TEST}
  services:
  - docker:dind
  script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - echo "Pushing image as ${CONTAINER_IMAGE}"
  - docker buildx build --push --annotation "org.opencontainers.image.title=${CI_COMMIT_TITLE} [${CI_COMMIT_REF_NAME} ${CI_COMMIT_SHORT_SHA}]" -f ${CI_JOB_NAME} -t ${CONTAINER_IMAGE} .

build-ubuntu-2204:
  <<: *docker-build-base

build-ubuntu-rolling:
  <<: *docker-build-base

build-python:
  <<: *docker-build-base

build-flatpak:
  <<: *docker-build-base

build-ubuntu-templight:
  <<: *docker-build-base
  stage: build-derived
  when: manual

test-images:
  stage: analyse
  tags:
  - docker
  image: endeveit/docker-jq
  script:
  - ./run-pipeline.sh ${IMAGE_TAG_TEST}

deploy-images:
  stage: deploy
  tags:
  - docker
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: ['']
  script:
  - crane auth login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - |
    for image in build-ubuntu-2204 build-ubuntu-rolling build-python build-flatpak; do
      crane tag ${PROJECT_REGISTRY}/$image:${IMAGE_TAG_TEST} ${IMAGE_TAG}
      crane delete ${PROJECT_REGISTRY}/$image:${IMAGE_TAG_TEST}
    done
