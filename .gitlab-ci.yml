stages:
  - docker-images
  - analyze
  - deploy
  - analyze-manual
  - docker-images-derived

variables:
  DOCKER_DRIVER: overlay2 # faster docker builds, see https://gitlab.com/gitlab-org/gitlab-ce/issues/21374, https://docs.docker.com/storage/storagedriver/overlayfs-driver/
  DOCKER_TLS_CERTDIR: "" # Work around failing CI jobs: see https://gitlab.com/gitlab-org/gitlab-ce/issues/64959#note_194582424
  PROJECT_REGISTRY: ${CI_REGISTRY}/${CI_PROJECT_PATH}
  IMAGE_TAG: sha-${CI_COMMIT_SHA}
  IMAGE_TAG_TEST: sha-test-${CI_COMMIT_SHA}

  # Override to set branch/ref of pep/core to test images on
  CORE_TEST_REF: ${CI_COMMIT_BRANCH}

  # >- is a YAML space-separated string, see https://yaml-multiline.info/
  # Images that should be retagged from $IMAGE_TAG_TEST to $IMAGE_TAG
  DEPLOY_IMAGES: >-
    builder-ubuntu-2204
    builder-ubuntu-rolling
    builder-flatpak
    runtime-ubuntu-2204
  # Branches update pipelines are scheduled on, in regex form
  SCHEDULE_BRANCHES_REGEX: ^(master|stable|release)$
  # If the previous image for a commit is at least this old, it will be rebuilt
  IMAGE_MAX_AGE_DAYS: 6

.docker-base:
  stage: docker-images
  tags:
    - docker
  image: docker:git
  variables:
    CONTAINER_IMAGE: ${PROJECT_REGISTRY}/${IMAGE_KIND}-${IMAGE_NAME}:${IMAGE_TAG_TEST}
  services:
    - docker:dind
  script:
    - apk add --no-cache jq
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      prev_created=$(docker buildx imagetools inspect ${PROJECT_REGISTRY}/${IMAGE_KIND}-${IMAGE_NAME}:${IMAGE_TAG} --format '{{json .Image}}' | jq --raw-output .created || true)
      if [ -z prev_created ]; then
        diff_secs=$(($(date +%s) - $(date -d "$prev_created" +%s)))
        diff_days=$((diff_secs / 60 / 60 / 24))
        echo "Previous image created at $prev_created, $diff_days days ($diff_secs s) ago"
        if $((diff_days >= ${IMAGE_MAX_AGE_DAYS})); then
          echo "Recent enough, won't rebuild"
          exit
        else
          echo 'Not recent enough, will rebuild'
        fi
      else
        echo 'No existing image for this commit'
      fi
      echo 'NEW_IMAGE=1' >>env.env  # Save, see artifacts
    - echo "Pushing image as $CONTAINER_IMAGE"
    - >
      docker buildx build
      --pull --push
      --annotation "org.opencontainers.image.title=${CI_COMMIT_TITLE} [${CI_COMMIT_REF_NAME} ${CI_COMMIT_SHORT_SHA}]"
      --file ./${IMAGE_KIND}/${IMAGE_NAME}.Dockerfile
      --tag ${CONTAINER_IMAGE}
      ${DOCKER_ARGS}
      ./${IMAGE_KIND}/
  artifacts:
    reports:
      # Save $NEW_IMAGE for jobs below
      dotenv: env.env


builder/ubuntu-2204:
  extends: .docker-base
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: ubuntu-2204

builder/ubuntu-rolling:
  extends: .docker-base
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: ubuntu-rolling

builder/flatpak:
  extends: .docker-base
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: flatpak

builder/ubuntu-templight:
  extends: .docker-base
  # Overrides stage in base
  stage: docker-images-derived
  when: manual
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: ubuntu-templight
    DOCKER_ARGS: "--build-arg BASE_IMAGE=${PROJECT_REGISTRY}/builder-ubuntu-2204:${IMAGE_TAG}"


runtime/ubuntu-2204:
  extends: .docker-base
  variables:
    IMAGE_KIND: runtime
    IMAGE_NAME: ubuntu-2204


test-images:
  stage: analyze
  rules:
    # Only enable manual run on schedule branches, and do not create MR pipelines (see https://docs.gitlab.com/ee/ci/pipelines/merge_request_pipelines.html )
    - if: $CI_COMMIT_BRANCH !~ $SCHEDULE_BRANCHES_REGEX || $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - when: on_success
  tags:
    - docker
  image: alpine
  script:
    # A better way to skip jobs is not yet available, see https://gitlab.com/gitlab-org/gitlab/-/issues/292816, https://gitlab.com/gitlab-org/gitlab/-/issues/329217
    # $NEW_IMAGE is retrieved from jobs above via env.env
    - if [ "$NEW_IMAGE" != 1 ]; then exit; fi
    - apk add --no-cache jq curl
    - ./run-pipeline.sh ${IMAGE_TAG_TEST} "${CORE_TEST_REF}"

deploy-images:
  stage: deploy
  tags:
    - docker
  image: docker:git
  services:
    - docker:dind
  script:
    - if [ "$NEW_IMAGE" != 1 ]; then exit; fi
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      for image in ${DEPLOY_IMAGES}; do
        echo "Retagging $image:${IMAGE_TAG_TEST} as ${PROJECT_REGISTRY}/$image:${IMAGE_TAG}"
        # This assumes sha-test tags will not be cleaned up while a previous image is still valid
        docker buildx imagetools create --tag ${PROJECT_REGISTRY}/$image:${IMAGE_TAG} ${PROJECT_REGISTRY}/$image:${IMAGE_TAG_TEST}
      done

test-images-manual:
  stage: analyze-manual
  when: manual
  allow_failure: true
  tags:
    - docker
  image: alpine
  script:
    - apk add --no-cache jq curl
    - ./run-pipeline.sh ${IMAGE_TAG} "${CORE_TEST_REF}"
