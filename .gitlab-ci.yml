stages:
  - docker-images
  - analyze
  - deploy
  - docker-images-derived

variables:
  DOCKER_DRIVER: overlay2 # faster docker builds, see https://gitlab.com/gitlab-org/gitlab-ce/issues/21374, https://docs.docker.com/storage/storagedriver/overlayfs-driver/
  DOCKER_TLS_CERTDIR: "" # Work around failing CI jobs: see https://gitlab.com/gitlab-org/gitlab-ce/issues/64959#note_194582424
  PROJECT_REGISTRY: ${CI_REGISTRY}/${CI_PROJECT_PATH}
  IMAGE_TAG: sha-${CI_COMMIT_SHA}
  IMAGE_TAG_TEST: sha-test-${CI_COMMIT_SHA}

  # >- is a YAML space-separated string, see https://yaml-multiline.info/
  # Images that should be retagged from $IMAGE_TAG_TEST to $IMAGE_TAG
  DEPLOY_IMAGES: >-
    builder-ubuntu-2204
    builder-ubuntu-rolling
    builder-flatpak
    runtime-ubuntu-2204
  # Branches update pipelines are scheduled on
  SCHEDULE_BRANCHES: >-
    master
    stable
    release
  # Branches update pipelines are scheduled, in regex form
  SCHEDULE_BRANCHES_REGEX: ^(master|stable|release)$

.docker-base:
  stage: docker-images
  tags:
    - docker
  image: docker:git
  variables:
    CONTAINER_IMAGE: ${PROJECT_REGISTRY}/${IMAGE_KIND}-${IMAGE_NAME}:${IMAGE_TAG_TEST}
  services:
    - docker:dind
  script:
    - |
      git fetch --depth=1
      if [ -n "${CI_COMMIT_BRANCH}" ]; then
        for branch in ${SCHEDULE_BRANCHES}; do
          if [ "$branch" = "${CI_COMMIT_BRANCH}" ]; then
            break
          fi
          sha="$(git rev-parse "origin/$branch" --)"
          [ -n "$sha" ] || exit 1
          if [ "$sha" = "${CI_COMMIT_SHA}" ]; then
            SKIP=1
          fi
        done
        echo "SKIP=$SKIP" >>skip.env  # Save, see artifacts
        if [ "$SKIP" = 1 ]; then
          echo "Will skip building docker images, since this commit will already be built on $branch"
          exit
        fi
      fi
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - echo "Pushing image as $CONTAINER_IMAGE"
    - >
      docker buildx build
      --push
      --annotation "org.opencontainers.image.title=${CI_COMMIT_TITLE} [${CI_COMMIT_REF_NAME} ${CI_COMMIT_SHORT_SHA}]"
      --file ./${IMAGE_KIND}/${IMAGE_NAME}.Dockerfile
      --tag ${CONTAINER_IMAGE}
      ${DOCKER_ARGS}
      ./${IMAGE_KIND}/
  artifacts:
    reports:
      # Save $SKIP for jobs below
      dotenv: skip.env


builder/ubuntu-2204:
  extends: .docker-base
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: ubuntu-2204

builder/ubuntu-rolling:
  extends: .docker-base
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: ubuntu-rolling

builder/flatpak:
  extends: .docker-base
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: flatpak

builder/ubuntu-templight:
  extends: .docker-base
  # Overrides stage in base
  stage: docker-images-derived
  when: manual
  variables:
    IMAGE_KIND: builder
    IMAGE_NAME: ubuntu-templight
    DOCKER_ARGS: "--build-arg BASE_IMAGE=${PROJECT_REGISTRY}/builder-ubuntu-2204:${IMAGE_TAG}"


runtime/ubuntu-2204:
  extends: .docker-base
  variables:
    IMAGE_KIND: runtime
    IMAGE_NAME: ubuntu-2204


test-images:
  stage: analyze
  variables:
    # Override to set branch/ref of pep/core to test images on
    CORE_TEST_REF: ${CI_COMMIT_BRANCH}
  rules:
    # Only enable manual run not run on feature branches, but do not create MR pipelines (see https://docs.gitlab.com/ee/ci/pipelines/merge_request_pipelines.html )
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_BRANCH !~ $SCHEDULE_BRANCHES_REGEX
      when: manual
      allow_failure: true  # Allow deploy-images to run without manual activation
    - when: on_success
  tags:
    - docker
  image: endeveit/docker-jq
  script:
    # A better way to skip jobs is not yet available, see https://gitlab.com/gitlab-org/gitlab/-/issues/292816, https://gitlab.com/gitlab-org/gitlab/-/issues/329217
    # $SKIP is retrieved from jobs above via skip.env
    - if [ "$SKIP" = 1 ]; then exit; fi
    - ./run-pipeline.sh ${IMAGE_TAG_TEST} "${CORE_TEST_REF}"

deploy-images:
  stage: deploy
  tags:
    - docker
  # Use crane for efficient remote retagging
  # See https://github.com/google/go-containerregistry/tree/main/cmd/crane#using-with-gitlab
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: ['']
  script:
    - if [ "$SKIP" = 1 ]; then exit; fi
    - crane auth login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      for image in ${DEPLOY_IMAGES}; do
        echo "Retagging $image:${IMAGE_TAG_TEST} as ${PROJECT_REGISTRY}/$image:${IMAGE_TAG}"
        crane tag ${PROJECT_REGISTRY}/$image:${IMAGE_TAG_TEST} ${IMAGE_TAG}
        crane delete ${PROJECT_REGISTRY}/$image:${IMAGE_TAG_TEST}
      done
